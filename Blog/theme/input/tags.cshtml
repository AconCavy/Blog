ArchiveSources: => GetString("PostSources")
ArchiveKey: Tags
ArchiveKeyComparer: => StringComparer.OrdinalIgnoreCase.ToConvertingEqualityComparer()
ArchiveDestination: >
  => GetInt("Index") <= 1 ? $"tags/{NormalizedPath.OptimizeFileName(GetString("GroupKey"))}/index.html" : $"tags/{NormalizedPath.OptimizeFileName(GetString("GroupKey"))}/{GetInt("Index")}.html"
ArchivePageSize: 10
ArchiveOrderKey: Published
ArchiveOrderDescending: true
Title: Tags
ArchiveTitle: => GetString("GroupKey")
---
@if (Document.ContainsKey(Keys.GroupKey))
{
    <div class="container-sm-height">
        <div class="row row-sm-height">
            <div class="col-md-8 right-border col-sm-height">
                @await Html.PartialAsync("/_posts.cshtml", Document)
            </div>
            <div class="col-md-4 col-sm-height">
                @foreach (var tag in OutputPages.Get("tags.html").GetChildren().OrderByDescending(x => x.GetChildren().Count))
                {
                    var badgeStyle = Document.GetString(Keys.GroupKey).Equals(tag.GetTitle(), StringComparison.OrdinalIgnoreCase) ? "badge-dark select" : "badge-dark";
                    var postCount = tag.GetChildren().Count.ToString();
                    <a href="@Context.GetLink(tag)" class="badge @badgeStyle"> @tag.GetTitle() (@postCount)</a>
                }
            </div>
        </div>
    </div>
}
else
{
    @foreach (var tag in Document.GetChildren().OrderByDescending(x => x.GetChildren().Count))
    {
        var postCount = tag.GetChildren().Count.ToString();
        <a role="button" href="@Context.GetLink(tag)" class="badge badge-light"> @tag.GetTitle() (@postCount)</a>
    }
}